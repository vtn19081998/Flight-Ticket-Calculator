; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "Flight Ticket Calculator"
#define MyAppVersion "6.2.2"
#define MyAppPublisher "Batman"
#define MyAppURL "http://phongvemaybay365.com/"
#define MyAppExeName "Flight Ticket Calculator v6.2.2.exe"
#define MyAppAssocName MyAppName + ""
#define MyAppAssocExt ".myp"
#define MyAppAssocKey StringChange(MyAppAssocName, " ", "") + MyAppAssocExt

[Setup]
AppId={{3F3D56C5-ADA0-44C7-AAC1-F9AE04B7C83F}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={autopf}\{#MyAppName}
UninstallDisplayIcon={app}\{#MyAppExeName}
ArchitecturesAllowed=x64compatible
ArchitecturesInstallIn64BitMode=x64compatible
ChangesAssociations=yes
DisableProgramGroupPage=yes
OutputBaseFilename=Flight Ticket Calculator
SetupIconFile=C:\Users\Batman\Documents\GitHub\Flight-Ticket-Calculator\v6.2.2\Python\images\icon.ico
SolidCompression=yes
WizardStyle=modern
DirExistsWarning=no
DisableDirPage=no
PrivilegesRequired=admin
SetupLogging=yes

[Languages]
Name: "vietnamese"; MessagesFile: "compiler:Languages\Vietnamese.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
Source: "C:\Users\Batman\Documents\GitHub\Flight-Ticket-Calculator\v6.2.2\Files\{#MyAppExeName}"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\Users\Batman\Documents\GitHub\Flight-Ticket-Calculator\v6.2.2\Python\images\*"; DestDir: "{app}\images"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "C:\Users\Batman\Documents\GitHub\Flight-Ticket-Calculator\v6.2.2\Python\data\*"; DestDir: "{app}\data"; Flags: ignoreversion recursesubdirs createallsubdirs

[Registry]
Root: HKA; Subkey: "Software\Classes\{#MyAppAssocExt}\OpenWithProgids"; ValueType: string; ValueName: "{#MyAppAssocKey}"; ValueData: ""; Flags: uninsdeletevalue
Root: HKA; Subkey: "Software\Classes\{#MyAppAssocKey}"; ValueType: string; ValueName: ""; ValueData: "{#MyAppAssocName}"; Flags: uninsdeletekey
Root: HKA; Subkey: "Software\Classes\{#MyAppAssocKey}\DefaultIcon"; ValueType: string; ValueName: ""; ValueData: "{app}\{#MyAppExeName},0"
Root: HKA; Subkey: "Software\Classes\{#MyAppAssocKey}\shell\open\command"; ValueType: string; ValueName: ""; ValueData: """{app}\{#MyAppExeName}"" ""%1"""

[Icons]
Name: "{autoprograms}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{autodesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent

[Code]
// Hàm kiểm tra và đóng tiến trình
function TerminateApp(const AppExeName: String): Boolean;
var
  ResultCode: Integer;
  ProcessName: String;
  I: Integer;
  ProcessList: array of String;
begin
  Result := True;
  // Danh sách các tên tiến trình của các phiên bản
  ProcessList := [
    AppExeName, // v6.2.2
    'Flight Ticket Calculator v6.2.0.exe',
    'Flight Ticket Calculator v6.2.1.exe'
  ];

  // Thử đóng từng tiến trình trong danh sách
  for I := 0 to GetArrayLength(ProcessList) - 1 do
  begin
    ProcessName := ProcessList[I];
    // Thử đóng tiến trình bằng WM_CLOSE
    if Exec('taskkill', '/IM "' + ProcessName + '" /T', '', SW_HIDE, ewWaitUntilTerminated, ResultCode) then
    begin
      if (ResultCode = 0) or (ResultCode = 128) then // 128: tiến trình không tồn tại
      begin
        Log('Successfully closed or no instance of ' + ProcessName + ' was running');
        Sleep(1000); // Chờ 1 giây để đảm bảo tiến trình đã đóng
      end
      else
      begin
        Log('Failed to close ' + ProcessName + ' with WM_CLOSE, error code: ' + IntToStr(ResultCode));
        // Thử buộc đóng
        if Exec('taskkill', '/IM "' + ProcessName + '" /T /F', '', SW_HIDE, ewWaitUntilTerminated, ResultCode) then
        begin
          if (ResultCode = 0) or (ResultCode = 128) then
          begin
            Log('Successfully force-closed or no instance of ' + ProcessName + ' was running');
            Sleep(1000);
          end
          else
          begin
            Log('Failed to force-close ' + ProcessName + ', error code: ' + IntToStr(ResultCode));
            Result := False;
          end;
        end
        else
        begin
          Log('Failed to execute taskkill /F for ' + ProcessName);
          Result := False;
        end;
      end;
    end
    else
    begin
      Log('Failed to execute taskkill for ' + ProcessName);
      Result := False;
    end;
  end;
end;

// Hàm xóa thư mục AppData
function DeleteAppDataFolder(): Boolean;
var
  Dir: String;
begin
  Result := True;
  Dir := ExpandConstant('{localappdata}\Programs\Flight Ticket Calculator');
  if DirExists(Dir) then
  begin
    if DelTree(Dir, True, True, True) then
      Log('Successfully deleted AppData directory: ' + Dir)
    else
    begin
      Log('Failed to delete AppData directory: ' + Dir);
      Result := False;
    end;
  end
  else
  begin
    Log('AppData directory does not exist: ' + Dir);
  end;
end;

// Hàm kiểm tra và gỡ bỏ phiên bản cũ
function UninstallOldVersion(): Boolean;
var
  UninstallString: String;
  ResultCode: Integer;
begin
  Result := True;
  // Kiểm tra registry để tìm uninstall string của phiên bản cũ (64-bit)
  if RegQueryStringValue(HKLM64, 'Software\Microsoft\Windows\CurrentVersion\Uninstall\{#SetupSetting("AppId")}_is1',
    'UninstallString', UninstallString) then
  begin
    // Thêm /SILENT để chạy uninstaller ở chế độ im lặng
    UninstallString := RemoveQuotes(UninstallString) + ' /SILENT';
    if Exec(UninstallString, '', '', SW_HIDE, ewWaitUntilTerminated, ResultCode) then
    begin
      if ResultCode = 0 then
      begin
        Log('Successfully uninstalled old version');
      end
      else
      begin
        Log('Failed to uninstall old version, error code: ' + IntToStr(ResultCode));
        Result := False;
      end;
    end
    else
    begin
      Log('Failed to execute uninstaller for old version');
      Result := False;
    end;
  end;
end;

// Hàm kiểm tra trước khi cài đặt
function InitializeSetup(): Boolean;
var
  Retry: Boolean;
begin
  Result := True;
  Retry := True;
  
  while Retry do
  begin
    // Kiểm tra và đóng tiến trình ứng dụng
    if TerminateApp('{#MyAppExeName}') then
    begin
      // Xóa thư mục AppData
      if DeleteAppDataFolder() then
      begin
        // Gỡ bỏ phiên bản cũ
        if UninstallOldVersion() then
        begin
          Retry := False;
        end
        else
        begin
          if MsgBox('Không thể gỡ bỏ phiên bản cũ của {#MyAppName}. Bạn có muốn thử lại không?', mbError, MB_YESNO) = IDNO then
          begin
            Result := False;
            Retry := False;
          end;
        end;
      end
      else
      begin
        if MsgBox('Không thể xóa thư mục dữ liệu của {#MyAppName} tại {localappdata}\Programs\Flight Ticket Calculator. Bạn có muốn thử lại không?', mbError, MB_YESNO) = IDNO then
        begin
          Result := False;
          Retry := False;
        end;
      end;
    end
    else
    begin
      if MsgBox('Không thể đóng ứng dụng {#MyAppName} hoặc các phiên bản cũ. Vui lòng kiểm tra Task Manager và đóng thủ công, sau đó thử lại, hoặc hủy để thoát.', mbError, MB_RETRYCANCEL) = IDCANCEL then
      begin
        Result := False;
        Retry := False;
      end;
    end;
  end;
end;

// Xóa thư mục cài đặt cũ trước khi cài đặt mới
procedure CurStepChanged(CurStep: TSetupStep);
var
  Dir: String;
begin
  if CurStep = ssInstall then
  begin
    Dir := ExpandConstant('{app}');
    if DirExists(Dir) then
    begin
      // Xóa toàn bộ thư mục cài đặt cũ
      if DelTree(Dir, True, True, True) then
        Log('Successfully deleted existing application directory: ' + Dir)
      else
        Log('Failed to delete existing application directory: ' + Dir);
    end;
  end;
end;